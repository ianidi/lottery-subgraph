// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CreateLottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreateLottery entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreateLottery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreateLottery", id.toString(), this);
  }

  static load(id: string): CreateLottery | null {
    return store.get("CreateLottery", id) as CreateLottery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get member(): Bytes | null {
    let value = this.get("member");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set member(value: Bytes | null) {
    if (value === null) {
      this.unset("member");
    } else {
      this.set("member", Value.fromBytes(value as Bytes));
    }
  }

  get lotteryID(): BigInt | null {
    let value = this.get("lotteryID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lotteryID(value: BigInt | null) {
    if (value === null) {
      this.unset("lotteryID");
    } else {
      this.set("lotteryID", Value.fromBigInt(value as BigInt));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get liquidity(): BigInt | null {
    let value = this.get("liquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidity");
    } else {
      this.set("liquidity", Value.fromBigInt(value as BigInt));
    }
  }

  get maxBetPercent(): BigInt | null {
    let value = this.get("maxBetPercent");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxBetPercent(value: BigInt | null) {
    if (value === null) {
      this.unset("maxBetPercent");
    } else {
      this.set("maxBetPercent", Value.fromBigInt(value as BigInt));
    }
  }

  get duration(): BigInt | null {
    let value = this.get("duration");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set duration(value: BigInt | null) {
    if (value === null) {
      this.unset("duration");
    } else {
      this.set("duration", Value.fromBigInt(value as BigInt));
    }
  }

  get formula(): BigInt | null {
    let value = this.get("formula");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set formula(value: BigInt | null) {
    if (value === null) {
      this.unset("formula");
    } else {
      this.set("formula", Value.fromBigInt(value as BigInt));
    }
  }

  get collateral(): Bytes | null {
    let value = this.get("collateral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBytes(value as Bytes));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimals(): i32 {
    let value = this.get("tokenDecimals");
    return value.toI32();
  }

  set tokenDecimals(value: i32) {
    this.set("tokenDecimals", Value.fromI32(value));
  }
}

export class PlayLottery extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PlayLottery entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlayLottery entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlayLottery", id.toString(), this);
  }

  static load(id: string): PlayLottery | null {
    return store.get("PlayLottery", id) as PlayLottery | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get member(): Bytes | null {
    let value = this.get("member");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set member(value: Bytes | null) {
    if (value === null) {
      this.unset("member");
    } else {
      this.set("member", Value.fromBytes(value as Bytes));
    }
  }

  get lotteryID(): BigInt | null {
    let value = this.get("lotteryID");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lotteryID(value: BigInt | null) {
    if (value === null) {
      this.unset("lotteryID");
    } else {
      this.set("lotteryID", Value.fromBigInt(value as BigInt));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get result(): boolean {
    let value = this.get("result");
    return value.toBoolean();
  }

  set result(value: boolean) {
    this.set("result", Value.fromBoolean(value));
  }

  get formula(): BigInt | null {
    let value = this.get("formula");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set formula(value: BigInt | null) {
    if (value === null) {
      this.unset("formula");
    } else {
      this.set("formula", Value.fromBigInt(value as BigInt));
    }
  }

  get collateral(): Bytes | null {
    let value = this.get("collateral");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collateral(value: Bytes | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBytes(value as Bytes));
    }
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (value === null) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(value as string));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (value === null) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(value as string));
    }
  }

  get tokenDecimals(): i32 {
    let value = this.get("tokenDecimals");
    return value.toI32();
  }

  set tokenDecimals(value: i32) {
    this.set("tokenDecimals", Value.fromI32(value));
  }
}
